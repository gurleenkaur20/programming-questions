/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <vector>

using namespace std;

vector<string> GetStairPath( int n )
{
    if(n==0)
    {
        vector<string> toAdd ;
        toAdd.push_back("");
        return toAdd;
    }
    else if(n<0)
    {
        vector<string> toAdd ;
        return toAdd;
    }
    
    vector<string> path1= GetStairPath(n-1);
    vector<string> path2= GetStairPath(n-2);
    vector<string> path3= GetStairPath(n-3);
    
    vector<string> path;
    
    for(auto i :path1)
    {
        path.push_back("1"+ i);
    }
    for(auto i :path2)
    {
        path.push_back("2" + i);
    }
    for(auto i :path3)
    {
        path.push_back("3" + i);
    }
    
    return path;
        
}


int countStairPathT(int n, int tab[])
{
    
    tab[0]=1;
    
    for(int i= 1; i<=n ; i++)
    {
        if(i==1)
        {
            tab[i]=tab[i-1];
        }
        else if(i==2)
        {
            tab[i]= tab[i-1]+tab[i-2];
        }
        else
            tab[i]= tab[i-1]+tab[i-2]+tab[i-3];
    }
    
    
    return tab[n];
}

int countStairPathM(int n, int qb[])
{
    
    if(n==0)
    {
        return 1;
    }
    else if(n<0)
    {
        return 0;
    }
    
    if(qb[n]>0)
    {
        return qb[n];
    }
    
    
    int p1= countStairPathM(n-1, qb);
    int p2= countStairPathM(n-2, qb);
    int p3= countStairPathM(n-3, qb);
    int totalPath= p1+p2+p3;
    
    qb[n]=totalPath;
    return totalPath;
}

int main()
{
    int n;
    cout<<"enter no. of stairs :\n";
    cin>>n;
    int arr[n+1]= {0};
    cout<<"counting stairs using tabulation....."<<countStairPathT(n, arr)<<endl;
    cout<<"counting stairs using memoization...."<<countStairPathM(n, arr)<<endl;
    
    vector<string> solution= GetStairPath(n);
    cout<<"Getting all the paths using recursion...\n";
    for(auto i: solution)
    {
        cout<<i<<endl;
    }

    return 0;
}
